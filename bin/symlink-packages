#! /usr/bin/env node

// Public Domain (-) 2017-present The Component Kit Authors.
// See the Component Kit UNLICENSE file for details.

//! Script to symlink packages into node_modules.
//
// This is used as the `postinstall` script by npm to symlink packages into
// `node_modules` so that those packages can be imported using bare paths, i.e.
// by just their package names instead of by their relative paths, e.g.
//
//     require('package/module-name')
//
// Instead of:
//
//     require('../lib/package/module-name')
//     require('../../../package/module-name')

const fs = require('fs')
const path = require('path')

const packages = require('../lib/pkgutil/packages') // use the relative path as pkgutil may not yet be symlinked into node_modules
const fsutil = require('../lib/pkgutil/fsutil')

// TODO(tav): Fallback to copying over the files on platforms where symlinking
// isn't supported, i.e. Windows.
function symlink(from, to) {
	console.log('>> Symlinking from', from, 'to', to)
	from = path.join(__dirname, from)
	try {
		if (fs.lstatSync(from).isSymbolicLink()) {
			return
		}
	} catch (err) {}
	fs.symlinkSync(to, from)
}

function main() {
	const {cjs, esm} = packages.info()
	fsutil.mkdir(path.join(__dirname, '../node_modules'))
	for (let pkg of cjs) {
		symlink(`../node_modules/${pkg}`, `../lib/${pkg}`)
	}
	for (let pkg of esm) {
		symlink(`../node_modules/${pkg}`, `../lib/${pkg}`)
	}
}

main()
